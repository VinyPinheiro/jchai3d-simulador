/*
 * SimuladorInterface.java
 *
 * Created on 30. Juli 2008, 16:18
 */
package org.jchai3d.simulador;

//import com.sun.opengl.util.Animator;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
//import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
//import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
//import javax.media.opengl.GLCanvas;
//import javax.media.opengl.GLCapabilities;
import com.jogamp.opengl.GLCapabilities;
//import javax.media.opengl.GLJPanel;
//import javax.media.opengl.GLProfile;
//import javax.media.opengl.awt.GLCanvas;
import com.jogamp.opengl.GLProfile;
import com.jogamp.opengl.awt.GLCanvas;
//import javax.swing.GroupLayout;
//import javax.swing.GroupLayout.Alignment;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
//import javax.swing.WindowConstants;

import com.jogamp.opengl.util.Animator;
import org.jchai3d.sim.builder.SimulationBuilder;
import org.jchai3d.sim.builder.SimulationRuntime;
import org.jchai3d.sim.builder.XMLParser;
import org.jchai3d.simulador.utils.PropertiesLoader;

/**
 *
 * @author cylab
 * @author mbien
 */
public class SimuladorInterface extends JFrame {

    private Animator animator;

    /* configura��es do monitor e do disposito acelerador grafico */
    private GraphicsEnvironment environment = GraphicsEnvironment.getLocalGraphicsEnvironment();
    private GraphicsDevice device = environment.getDefaultScreenDevice();
    private Dimension dimension = new Dimension();
    private ProcessoGrafico processoGrafico;
    private ProcessoHaptico processoHaptico;
    private PropertiesLoader propertiesLoader = PropertiesLoader.getInstance("simulador.properties");
    private SimulationRuntime runtime;
    private int mouseX;
    private int mouseY;
    private boolean flagCameraInMotion;
    private int mouseButton;

    /** Creates new form MainFrame */
    public SimuladorInterface() {
        initComponents();

        try {
            /* recupera o arquivo XML de configur��o */
            runtime = SimulationBuilder.buildSimulation(XMLParser.parseFile(propertiesLoader.getValor("SIMULADOR.CONFIG")));

            /* ap�s realizar o parse no XML, criar proesso grafico */
            processoGrafico = ProcessoGrafico.getInstance(runtime);

            /* criar processo haptico */
            //processoHaptico = ProcessoHaptico.getInstance(processoGrafico, true);
            //processoHaptico = ProcessoHaptico.getInstance(processoGrafico, false);
        } catch (Throwable tw) {
            tw.printStackTrace();
            JOptionPane.showMessageDialog(null, "n�o foi possivel iniciar o simulador\n"
                    + "Verificique o arquivo de configura��o do simuldor\n"
                    + "ou arquivo de properties do simulador");
            System.exit(-1);
        }

        setTitle(runtime.getMetaData().getTitle() + " " + runtime.getMetaData().getVersion());

        /* relaciona tela de redesenho do S.O com a tela */
        viewport.addGLEventListener(processoGrafico.getViewport());
        //animator = new Animator(viewport);
        animator = new Animator(viewport);

        this.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                // Run this on another thread than the AWT event queue to
                // make sure the call to Animator.stop() completes before
                // exiting
                new Thread(new Runnable() {

                    public void run() {
                        animator.stop();
                        System.exit(0);
                    }
                }).start();
            }
        });
    }

    public void setFullScreen(boolean modeFullScreen) {
        if (modeFullScreen && device.isFullScreenSupported()) {
            /* defini dimens�o full screen */
            dimension.setSize(device.getDefaultConfiguration().getBounds().getWidth(),
                    device.getDefaultConfiguration().getBounds().getHeight());

            /* seta a dimens�o */
            this.setSize(dimension);
        }
    }

    @Override
    public void setVisible(boolean show) {
        if (!show) {
            animator.stop();
        }
        super.setVisible(show);
        if (show) {
            animator.start();
            processoHaptico.getThreadHaptica().start();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewport = new GLCanvas(createGLCapabilites());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        viewport.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                viewportMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                viewportMouseReleased(evt);
            }
        });
        viewport.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                viewportMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(viewport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(viewport, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewportMouseDragged(MouseEvent evt) {//GEN-FIRST:event_viewportMouseDragged
        if (flagCameraInMotion) {
            if (mouseButton == MouseEvent.BUTTON3) {
                processoGrafico.setCameraDistance(processoGrafico.getCameraDistance() - (0.01 * (evt.getY() - mouseY)));
            } else if (mouseButton == MouseEvent.BUTTON1) {
                processoGrafico.rotateObject(mouseX, mouseY, evt.getX(), evt.getY());
            } 
        }

        processoGrafico.updateCameraPosition();

        mouseX = evt.getX();
        mouseY = evt.getY();
    }//GEN-LAST:event_viewportMouseDragged

    private void viewportMousePressed(MouseEvent evt) {//GEN-FIRST:event_viewportMousePressed
        flagCameraInMotion = true;
        mouseX = evt.getX();
        mouseY = evt.getY();
        mouseButton = evt.getButton();
    }//GEN-LAST:event_viewportMousePressed

    private void viewportMouseReleased(MouseEvent evt) {//GEN-FIRST:event_viewportMouseReleased
        flagCameraInMotion = false;
    }//GEN-LAST:event_viewportMouseReleased

    /**
     * Called from within initComponents().
     * hint: to customize the generated code choose 'Customize Code' in the contextmenu
     * of the selected UI Component you wish to cutomize in design mode.
     * @return Returns customized GLCapabilities.
     */
    private GLCapabilities createGLCapabilites() {

        GLCapabilities capabilities = new GLCapabilities(GLProfile.getDefault());
        capabilities.setHardwareAccelerated(true);

        // try to enable 2x anti aliasing - should be supported on most hardware
        capabilities.setNumSamples(2);
        capabilities.setSampleBuffers(true);

        return capabilities;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // Run this in the AWT event thread to prevent deadlocks and race conditions
        EventQueue.invokeLater(new Runnable() {

            public void run() {

                // switch to system l&f for native font rendering etc.
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (Exception ex) {
                    Logger.getLogger(getClass().getName()).log(Level.INFO, "can not enable system look and feel", ex);
                }

                SimuladorInterface frame = new SimuladorInterface();
                frame.setFullScreen(true);
                frame.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    //private javax.media.opengl.GLCanvas viewport;
    // End of variables declaration//GEN-END:variables
    private GLCanvas viewport;
}
